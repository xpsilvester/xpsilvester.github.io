<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue电商项目]]></title>
    <url>%2F2018%2F09%2F18%2FVueProject%2F</url>
    <content type="text"><![CDATA[最近用Vue做了关于电商类的项目，以下就是修改过的demo项目源码地址：https://github.com/xpsilvester/Project/tree/master/Vue/Shop欢迎大家踊跃 提出建议 点个Star或者Fork支持一下~目录结构12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182│ .babelrc #ES6语法编译配置│ .editorconfig #定义代码格式 │ .postcssrc.js #postcss配置文件│ goods.json #模拟数据json文件│ index.html #入口页面│ package.json #项目基本信息,包依赖信息等│ ├─build│ build.js #项目构建(webpack)相关代码│ check-versions.js #检查node、npm等版本│ logo.png #标签logo│ utils.js #构建工具相关│ vue-loader.conf.js #webpack loader配置│ webpack.base.conf.js #webpack基础配置│ webpack.dev.conf.js #webpack开发环境配置,构建开发本地服务器│ webpack.prod.conf.js #webpack生产环境配置│├─config #项目开发环境配置│ dev.env.js #开发环境变量│ index.js #项目一些配置变量│ prod.env.js #生产环境变量│ test.env.js #测试环境变量│├─dist│ │ index.html #打包后的主页面│ ││ └─static/ #打包后的静态资源文件夹│ │└─src #源码目录 │ App.vue #页面入口文件 │ main.js #程序入口文件，加载各种公共组件 │ ├─assets/ #打包前的资源文件夹 │ │ ├─components #vue公共组件目录 │ │ Bottom.vue #底部导航条 │ │ Header.vue #顶部栏 │ │ Log.vue #预留打印组件 │ │ Slider.vue #轮播图组件 │ │ style.scss #组件样式scss │ │ Tab.vue #首页tab切换组件 │ │ │ └─Test #单元测试 │ └─ Test.scss │ Test.vue │ ├─lib │ utils.js #通用工具方法 │ ├─pages #页面目录 │ └─About.scss │ About.vue #关于我 │ Cart.scss │ Cart.vue #购物车 │ Category.scss │ Category.vue #商品分类 │ Computer.scss │ Computer.vue #电脑列表 │ Detail.scss │ Detail.vue #商品详情 │ Home.scss │ Home.vue #主页面框架 │ Login.scss │ Login.vue #登陆页 │ Phone.scss │ Phone.vue #手机列表页 │ Recommend.scss │ Recommend.vue #推荐页 │ Router.scss │ Router.vue #路由器列表页 │ Search.scss │ Search.vue #搜索页 │ Television.scss │ Television.vue #电视列表页 │ ├─router │ └─ index.js #路由配置 │ └─store └─ index.js #Vuex的Store状态管理组件 一、首页src/pages/Home.vue – 实现基本布局，轮播组件, 路由切换 二、产品分类页src/pages/Category.vue – 实现分类tag随着上下滑动而变化 三、产品详情页src/pages/Detail.vue – 实现轮播，底部加入购物车，专题图片展示 四、购物车src/pages/Cart.vue – 实现全选，取消，单选，清空购物车按钮功能，使用Vuex实现购物车加减计算 五、搜索页src/pages/Search.vue – 搜索功能暂未实现 六、关于我src/pages/About.vue – 基本页面布局 七、后台相关接口实现暂时使用模拟数据 八、页面动图演示]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电商类微信小程序 仿小米商城]]></title>
    <url>%2F2018%2F05%2F16%2FWechatApp%2F</url>
    <content type="text"><![CDATA[最近做了关于电商类微信小程序项目，以下就是修改过的demo项目源码地址：https://github.com/xpsilvester/Project/tree/master/WeChatApp欢迎大家踊跃 提出建议 点个Star或者Fork支持一下~留言地址：https://www.xpsilvester.com/2018/05/16/WechatApp/一、首页pages/index/index – 实现基本布局，分类筛选 二、产品列表页pages/products/list/list – 实现分类接受参数，tag标签切换，相关分类排序 三、产品详情页pages/products/detail/detail – 实现swiper轮播，底部加入购物车，立即购买按钮实现，专题图片展示 四、购物车pages/cart/cart – 实现全选，取消，单选，立即购买，清空购物车按钮功能实现 五、订单列表pages/order/list/list – 基本和产品列表一样六、关于我pages/about/about – 获取用户头像，openid，基本布局 七、支付接口调用pages/order/pay/pay – 支付功能实现 八、后台相关接口实现待传 九、小程序动图演示]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动web开发与适配]]></title>
    <url>%2F2018%2F04%2F22%2FmobileDev%2F</url>
    <content type="text"><![CDATA[一、移动web开发特点1.跑在手机端的页面（H5页面）2.跨平台（IOS和安卓）3.基于webview（可以看做是一个浏览器）4.告别IE，拥抱webkit5.更高的适配和性能要求 二、常见移动web适配方法PC： 960px/1000px居中 盒子模型，定高，定宽 Display:inline-block 移动端： 定高，宽度百分比 flex Media Query（媒体查询） 123456@media screen and(max-width:320px)&#123; /*css 适配宽度小于320px的屏幕*/&#125;@media screen and(min-width:321px)&#123; /*css 适配宽度大于等于321px的屏幕*/&#125; Rem布局 三、Rem原理 值根据html根元素大小而定，也可以作为宽度、高度等单位。 将px换为rem，动态修改font-size适配，1rem默认是16px。可以通过设置html全局的font-size来对rem进行初始化，html的font-size设置为多少px，1rem就等于多少px 1234/*设置1rem=24px*/html&#123; font-size:24px;&#125; ios 6 和 android 2.1 以上，基本覆盖所有流行的手机系统。 四、动态修改rem方法 使用媒体查询 123456789101112131415161718@media screen and (min-width:361px)&#123; /*css 适配宽度大于361px的屏幕*/ html&#123; font-size:36px; &#125;&#125;@media screen and (max-width:360px) and (min-width:321px)&#123; /*css 适配宽度小于360px且大于321px的屏幕*/ html&#123; font-size:24px; &#125;&#125;@media screen and(max-width:321px)&#123; /*css 适配宽度小于等于321px的屏幕*/ html&#123; font-size:16px; &#125;&#125; 使用JS动态修改 123456789101112//根据屏幕宽度变化动态设置html的font-size：//获取视窗的宽度let htmlWidth = document.documentElement.clientWidth || document.body.ClientWidth;//获取视窗对象let htmlDom = document.getElementsByTagName("html")[0];//设置视窗默认的font-sizehtmlDom.style.fontSize = htmlWidth / 10 + "px"； 五、rem结合sass使用让sass自动根据px值转换成相应的rem值12345678@function px2rem($px)&#123; $rem:37.5px; @return ($px/$rem) + rem;&#125;.demo&#123; width:px2rem(75px); height:px2rem(37.5px);&#125; 编译结果：1234.demo&#123; width:2rem; heigth:1rem;&#125; 六、H5移动页面实战演示地址：H5页面Demo 请用移动端调试Github项目地址：移动适配 可以直接下载zip,或者git clone下来，最好再点个Star或者Fork支持一下~ 打包编译：12npm install #下载依赖包webpack #编译 参考：移动web开发适配秘籍Rem移动端H5解惑—页面适配Sass中文文档webpack中文文档]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript常用算法]]></title>
    <url>%2F2018%2F04%2F14%2FJsAlgorithm%2F</url>
    <content type="text"><![CDATA[1.初级算法-线性查找-时间复杂度O(n) 2.二分查找(又称折半查找) - 适用于已排好序的线性结构 - 时间复杂度O(logN) 3.冒泡排序 – 时间复杂度O(n^2) 4.选择排序 – 时间复杂度O(n^2) 5.插入算法 – 时间复杂度O(n^2) 6.字符串反转 – 时间复杂度O(logN) 7.一个基于对象的单链表 8.用数组实现的队列：利用数组中的push和shift方法可以使队列的实现显得非常简单、从定义一个Queue构造函数开始实现队列 9.栈的实现 10.快速排序 – 平均时间复杂度O(nlog2n) 初级算法线性查找-时间复杂度O(n)–相当于算法界中的HelloWorld12345678910111213var arr = new Array(1,2,10,9,5);//线性搜索//A为数组，x为要搜索的值function linearSearch(A,x)&#123; for(var i=0;i&lt;A.length;i++)&#123; if(A[i]==x)&#123; return i; &#125; &#125; return false;&#125;document.write(linearSearch(arr,10)+"&lt;/br&gt;"); 二分查找(又称折半查找) - 适用于已排好序的线性结构 - 时间复杂度O(logN)12345678910111213141516171819//二分搜索//A为已按"升序排列"的数组，x为要查询的元素//返回目标元素的下标var arr1 = new Array(1,2,10,19,25);function binarySearch(A, x)&#123; var low = 0, high = A.length - 1; while(low&lt;=high)&#123; var mid=Math.floor((low+high)/2);//下取整 if(A[mid]==x)&#123; return mid; &#125;else if(A[mid]&gt;x)&#123; high=mid-1; &#125;else&#123; low=mid+1; &#125; &#125; return false;&#125;document.write(binarySearch(arr1,19)+"&lt;/br&gt;"); 冒泡排序时间复杂度O(n^2)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455var arr2 = new Array(1,2,10,9,5);//第一种function bubbleSort(A)&#123; var i,j,flag,temp; for(i=A.length-1;i&gt;=1;i--)&#123; flag=0; for(j=1;j&lt;=i;j++)&#123; if(A[j-1]&gt;A[j])&#123; temp=A[j]; A[j]=A[j-1]; A[j-1]=temp; flag=1; &#125; &#125; if(flag==0) return; &#125;&#125;/*第二种function bubbleSort(A) &#123; for (var i = 0; i &lt; A.length; i++) &#123; var sorted = true; //注意：内循环是倒着来的 for (var j = A.length - 1; j &gt; i; j--) &#123; if (A[j] &lt; A[j - 1]) &#123; var temp=A[j]; A[j]=A[j-1]; A[j-1]=temp; sorted = false; &#125; &#125; if (sorted) &#123; return; &#125; &#125;&#125;第三种（推荐:容易写，不容易出错）function bubbleSort(arr)&#123; var flag=0; do&#123; flag=1; for(var i=0 ; i&lt;arr.length;i++)&#123; if(arr[i]&gt;arr[i+1])&#123; var temp=arr[i]; arr[i]=arr[i+1]; arr[i+1]=temp; flag=0; &#125; &#125; &#125; while(flag==0)&#125;*/bubbleSort(arr2); 选择排序时间复杂度O(n^2)12345678910111213141516171819202122//思路：找到最小值的下标记下来，再交换function selectionSort(A)&#123; for(var i=0;i&lt;A.length;i++)&#123; var k=i; //这个是算法的关键，它从无序序列中挑出一个最小的元素 for(j=i+1;j&lt;A.length;j++)&#123; if(A[k]&gt;A[j]) k=j; &#125; //下面3句完成最小元素与无序序列第一个元素的交换 var temp=A[i]; A[i]=A[k]; A[k]=temp; &#125;&#125;var arr3=[14,35,25,12,64,33];selectionSort(arr3);document.write("&lt;/br&gt;");for(var i=0;i&lt;arr3.length;i++)document.write(arr3[i]+",");document.write("&lt;/br&gt;"); 插入算法时间复杂度O(n^2) 假定当前元素之前的元素已经排好序，先把自己的位置空出来，然后前面比自己大的元素依次向后移，直到空出一个”坑”，然后把目标元素插入”坑”中每趟将一个待排序的元素作为关键字，按照其关键字值的大小插入到已经排好的部分序列的适当位置，直到插入完成 1234567891011121314151617function insertSort(A)&#123; for(var i=1;i&lt;A.length;i++)&#123;//数组从下标0开始存储，第一个元素有序，所以从第二个开始处理 var temp=A[i];//将待插入元素暂存于temp中 var j=i-1; //下面这个循环完成了从待排元素之前的元素开始扫描，如果大于待排元素，则后移一位 while(j&gt;=1&amp;&amp;temp&lt;A[j])&#123; A[j+1]=A[j]; j--; &#125; A[j+1]=temp; &#125;&#125;arr4=[45,342,45634,664,656,34342,46,56,544];insertSort(arr4);for(var i=0;i&lt;arr4.length;i++)document.write(arr4[i]+",");document.write("&lt;/br&gt;"); 字符串反转时间复杂度O(logN)字符串反转(比如：ABC -&gt; CBA) 可以直接用str.split(“”).reverse().join(“”)12345678910111213141516var str='ABC';function reverse(s)&#123; var a=s.split('');//把‘ABC’分成子串数组['A','B','C'] var i=0,j=a.length-1; while(i&lt;j)&#123; var temp=a[i]; a[i]=a[j]; a[j]=temp; i++; j--; &#125; return a.join('');//把字符串重新组合&#125;var k=reverse(str);document.write(k);document.write("&lt;/br&gt;"); 设计一个基于对象的单链表（双链表类似）需要设计两个类，Node 类用来表示节点, LinkedList 类提供插入节点、删除节点、显示列表元素的方法,以及其他一些辅助方法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980//Node类：function Node(element)&#123; this.data=element;//当前节点的数据 this.next=null;//下一个节点数据 //this.previous = null;(双链表)&#125;//LinkedList类function LList()&#123; this.head=new Node("head");//头节点 &#125;//链表的操作LList.prototype=&#123; //查找某一节点 find:function(item)&#123; var currNode=this.head; while(currNode.data!=item)&#123; currNode=currNode.next; &#125; return currNode; &#125;, //向某一元素后面插入新节点 insert:function(newElement,item)&#123; var newNode=new Node(newElement); var current=this.find(item); newNode.next=current.next; current.next=newNode; //newNode.previous = current;(双链表) &#125;, //查找某一节点的前一个节点(前驱) findPrevious:function(item)&#123; var currNode=this.head; //从头结点开始找，一直到当前结点的next==item是返回当前结点 while (!(currNode.next == null) &amp;&amp;(currNode.next.element != item)) &#123; currNode=currNode.next; &#125; return currNode; &#125;, //删除某一个节点 remove:function(item)&#123; var prevNode=this.findPrevious(item); if (!(prevNode.next == null))&#123; prevNode.next = prevNode.next.next; /*(双链表) currNode.previous.next = currNode.next; currNode.next.previous = currNode.previous; currNode.next = null; currNode.previous = null; */ &#125; &#125;, //修改某一节点的数据 edit:function(item,newItem)&#123; var curNode=this.find(item); curNode.data=newItem; &#125;, //在控制台打印出所有节点(为了方便预览) print:function()&#123; var currNode=this.head; while (!(currNode.next == null))&#123; console.log(currNode.next.data); currNode = currNode.next; &#125; &#125;&#125;//测试链表//新建链表var names=new LList();names.insert("likek", "head");//往头节点后插入节点likek names.insert("zhangsan", "likek");//往likek后插入节点zhangsan names.insert("lisi", "zhangsan");//往zhangsan后插入节点lisi names.insert("wangwu", "lisi");//往lisi后插入节点wangwu names.print(); console.log("****************************");//移除结点names.remove("zhangsan");//删除zhangsan节点names.print();console.log("****************************");//更改结点names.edit("lisi","wangnima");//将lisi节点改为wangnimanames.print();console.log("****************************"); 用数组实现的队列利用数组中的push和shift方法可以使队列的实现显得非常简单123456789var name1=[];name1.push("wuxinpei");//推入元素name1.push("zhangjionghuan");name1.push("suguojing");console.log(name1);//输出数组console.log(name1.join());//输出字符串name1.shift();//出队console.log(name1.join());console.log("****************************"); 从定义一个Queue构造函数开始实现队列123456789101112131415161718192021222324252627282930313233343536function Queue()&#123; this.dataStore=[];&#125;Queue.prototype=&#123; enqueue:function (element) &#123; this.dataStore.push(element);//入队，加入新成员 &#125;, dequeue:function()&#123; return this.dataStore.shift();//删除并返回队首元素 &#125;, front:function()&#123; return this.dataStore[0];//返回队首元素 &#125;, back:function()&#123; return this.dataStore[this.dataStore.length-1];//返回队尾元素 &#125;, toString:function()&#123; return this.dataStore.join();//返回队列中所有元素 &#125;, isempty:function()&#123; return !this.dataStore.length;//判断队列是否为空 &#125; &#125;//测试队列var ui=new Queue(); ui.enqueue("same"); ui.enqueue("哈哈"); ui.enqueue(26); console.log(ui.toString());//"likek,哈哈,18"console.log("****************************"); /*ui.dequeue();//"likek" ui.toString();//"likek,哈哈" ui.isempty();//false ui.dequeue();ui.dequeue(); ui.isempty();//true */ 栈的实现从定义一个stack构造函数开始1234567891011121314151617181920212223242526272829303132function Stack() &#123; this.dataStore = [];//保存栈内元素 this.top = 0; &#125; //对栈的各种操作 Stack.prototype=&#123; push:function push(element) &#123; this.dataStore[this.top++] = element;//添加一个元素并将top+1 &#125;, peak:function peak() &#123; return this.dataStore[this.top-1];//返回栈顶元素 &#125;, pop:function pop() &#123; return this.dataStore[--this.top];//返回栈顶元素并将top-1 &#125;, clear:function clear() &#123; this.top = 0;//将top归0 &#125;, length:function length() &#123; return this.top;//返回栈内的元素个数 &#125; &#125; //测试：var lk=new Stack(); lk.push("likeke"); lk.push("zhangsan"); lk.push("wangwu"); lk.length();//3 console.log(lk.peak()); lk.pop();//"wangwu" lk.clear(); lk.length();//0 快速排序交换排序和递归–平均复杂度O(nlog2n)12345678910111213141516171819202122232425262728arr5=[49,38,65,97,76,13,27];function quickSort(arr,l,r)&#123;//对从arr[l]到arr[r]的元素进行排序 var temp,i=l,j=r; if(i&lt;j)&#123; temp=arr[i]; while(i!=j)&#123; while(i&lt;j&amp;&amp;arr[j]&gt;temp)&#123;//从右往左扫描到一个小于temp的元素 j--; &#125; if(i&lt;j)&#123; arr[i]=arr[j];//把j的元素放在i的位置上（temp的左边） i++;//i右移一位 &#125; while(i&lt;j&amp;&amp;arr[i]&lt;temp)&#123;//从左往右扫描找到一个大于temp的元素 i++; &#125; if(i&lt;j)&#123; arr[j]=arr[i];//把i的元素放在j的位置上(temp的右边) j--; &#125; &#125; arr[i]=temp;//将temp放在最终位置 quickSort(arr,l,i-1);//递归地对temp左边的元素进行排序 quickSort(arr,i+1,r);//递归地对temp右边的元素进行排序 &#125;&#125;quickSort(arr5,0,6);console.log(arr5);]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS外部字体引入、压缩、自动化]]></title>
    <url>%2F2018%2F04%2F08%2FCSS%E5%A4%96%E9%83%A8%E5%AD%97%E4%BD%93%E5%BC%95%E5%85%A5%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8E%8B%E7%BC%A9%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8C%96%2F</url>
    <content type="text"><![CDATA[一、CSS引入自定义字体示例为SourceHanSansCNM字体在CSS文件或 style 标签中添加： 12345678910111213141516@font-face &#123; font-family: 'SourceHanSansCNM'; src: url('SourceHanSansCN-Medium.eot'); src: local('SourceHanSansCNM'), local('SourceHanSansCN-Medium'), url('SourceHanSansCN-Medium.eot?#iefix') format('embedded-opentype'), url('SourceHanSansCN-Medium.woff') format('woff'), url('SourceHanSansCN-Medium.ttf') format('truetype'), url('SourceHanSansCN-Medium.svg#SingleMaltaRegular') format('svg'); font-weight: normal; font-style: normal;&#125;body&#123; font-size: 32px; font-family: 'SourceHanSansCNM';&#125; 字体后缀和浏览器有关，如下所示 .TTF或.OTF，适用于Firefox 3.5、Safari、Opera .EOT，适用于Internet Explorer 4.0+ .SVG，适用于Chrome、IPhone *注意：下载的ttf或者otf文件转格式时可能会出错，最好多试几个转码工具或者多下几个ttf文件对比一下字体库：Google Font、Font-Awesome在线转码地址：字客网、在线转换器 二、使用Node.js工具Font-Spider（字蛛）压缩CSS引用字体参考：https://blog.csdn.net/yueyemoyan/article/details/52004203 1.原理英文字体文字部分由26个字母组成，所以字体文件通常不会太大；而中文汉字数量总共约有九万左右，国标(GB)字库 有6763字, 而根据《现代汉语常用字表》统计数据，常用汉字也要有3500个左右。中文字体文件通常都会几M的大小，参照现在中国的网络环境，显然不适合在项目中使用。字体文件过大严重影响了网页加载速度，对服务器的压力也很大Font-Spider中文WebFont解决方案的诞生：它是一个 web 字体工具，通过自动化技术来压缩、转码跨平台的中文字体，让网页自由嵌入中文字体成为可能。主要原理是a.爬行本地 html 文档，分析所有 css语句b.记录@font-face语句声明的字体，并且记录使用该字体的 css 选择器c.通过 css 选择器的规则查找当前 html 文档的节点，记录节点上的文本d.找到字体文件并删除没被使用的字符e.编码成跨平台使用的字体格式 web 中文字体演示与工具使用请前往主页：http://font-spider.org/ 2.使用前提是已经安装了NodeJs，现在的前端没用NodeJs几乎不能工作，安装过程就不多说了，参考教程：http://www.runoob.com/nodejs/nodejs-install-setup.html 安装字蛛：1D:\Documents and Settings\Desktop&gt; npm install font-spider -g 可能会出现一堆警告，可以无视，运行一下就知道行不行了，例如在D:\Documents and Settings\Desktop\SourceHanSansCN目录下有index.html,并在相应路径放好了ttf的字体源文件。运行1D:\Documents and Settings\Desktop&gt; font-spider D:\Documents and Settings\Desktop\SourceHanSansCN\index.html 也可以用通配符*.html直接扫描全部html文件出现这个就成功了在你原来的字体文件目录下会多出相应的压缩之后的字体文件，发现小了很多吧，然后你再引用相关的新的字体文件就行了 三、使用C#批量处理html文件的字体文件压缩，实现自动化如果存在很多html需要压缩字体文件，一个一个地执行”font-spider”命令会很麻烦，现在写一个程序，可以实现自动检测文件夹的变化，当文件夹中有新的html加入时，自动运行”font-spider”进行字体文件压缩 1.判断指定文件是否存在123456789string path = "D:/Documents and Settings/Desktop/SourceHanSansCN/index.html";if (System.IO.File.Exists(path))&#123; Console.WriteLine("本地文件确实存在！");&#125;else&#123; Console.WriteLine("本地文件不存在！"); &#125; 2.复制文件到指定目录 使用CopyTo方法将soure路径中的 “SourceHanSansCN-Medium.ttf” 文件复制到finalRoute中12345678910111213string source = @"D:/Documents and Settings/Desktop/SourceHanSansCN/source/SourceHanSansCN-Medium.ttf";string finalRoute = @"D:/Documents and Settings/Desktop/SourceHanSansCN/SourceHanSansCN-Medium.ttf";try&#123; FileInfo info = new FileInfo(source); info.CopyTo(finalRoute, true); Console.WriteLine("&#123;0&#125; copied to &#123;1&#125;", source, finalRoute); Console.WriteLine("The second Copy operation succeeded, which was expected.");&#125;catch&#123; Console.WriteLine("Double copy is not allowed, which was not expected.");&#125; 3.使用C#执行cmd命令12345678910111213141516171819202122232425262728293031//要执行的cmd命令//cmd 中的路径必须是双引号""string strInput = "font-spider \"D:\\Documents and Settings\\Desktop\\SourceHanSansCN\\index.html\"";Process pk = new Process();//设置要启动的应用程序pk.StartInfo.FileName = "cmd.exe";//是否使用操作系统shell启动pk.StartInfo.UseShellExecute = false;// 接受来自调用程序的输入信息pk.StartInfo.RedirectStandardInput = true;//输出信息pk.StartInfo.RedirectStandardOutput = true;// 输出错误pk.StartInfo.RedirectStandardError = true;//不显示程序窗口pk.StartInfo.CreateNoWindow = false;//启动程序pk.Start();//向cmd窗口发送输入信息pk.StandardInput.WriteLine(strInput + "&amp;exit");pk.StandardInput.AutoFlush = true;//获取输出信息string strOuput = pk.StandardOutput.ReadToEnd();//等待程序执行完退出进程pk.WaitForExit();pk.Close();Console.WriteLine(strOuput); 4.监控文件夹内部变化参考教程：C#中监控文件夹的变化监控桌面的”SourceHanSansCN”文件夹中所有文件的变化1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162static void Main(string[] args)&#123; //调用WatcherStrat方法 WatcherStrat(@"D:\Documents and Settings\Desktop\SourceHanSansCN", "*.*"); Console.ReadKey();&#125;public void WatcherStrat(string path, string filter)&#123; FileSystemWatcher watcher = new FileSystemWatcher(); //文件路径 watcher.Path = path; //文件过滤器，“*.*”则指定所有文件,"*.hmtl"则指定所有html文件 watcher.Filter = filter; //加入文件改变，创建，删除，重命名方法 watcher.Changed += new FileSystemEventHandler(OnProcess); watcher.Created += new FileSystemEventHandler(OnProcess); watcher.Deleted += new FileSystemEventHandler(OnProcess); watcher.Renamed += new RenamedEventHandler(OnRenamed); //对象在收到改变通知时提交事件 watcher.EnableRaisingEvents = true; watcher.NotifyFilter = NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.DirectoryName | NotifyFilters.FileName | NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.Security | NotifyFilters.Size; //对象监控子目录中发生的改变 watcher.IncludeSubdirectories = true;&#125;private static void OnProcess(object source, FileSystemEventArgs e)&#123; if (e.ChangeType == WatcherChangeTypes.Created) &#123; OnCreated(source, e); &#125; else if (e.ChangeType == WatcherChangeTypes.Changed) &#123; OnChanged(source, e); &#125; else if (e.ChangeType == WatcherChangeTypes.Deleted) &#123; OnDeleted(source, e); &#125;&#125;//创建时执行代码private static void OnCreated(object source, FileSystemEventArgs e)&#123; Console.WriteLine("文件新建事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name);&#125;//改变时执行代码private static void OnChanged(object source, FileSystemEventArgs e)&#123; Console.WriteLine("文件改变事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name);&#125;//删除时执行代码private static void OnDeleted(object source, FileSystemEventArgs e)&#123; Console.WriteLine("文件删除事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name);&#125;//重命名时执行代码private static void OnRenamed(object source, RenamedEventArgs e)&#123; Console.WriteLine("文件重命名事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name);&#125; 5.完整代码*注意第14行的注释需要取消，由于md代码取消之后就没有高亮了，所以才加上的。以桌面上的“SourceHanSansCN”文件夹为例：1.在“D:/Documents and Settings/Desktop/SourceHanSansCN/source/”文件夹中放入所需要的字体.ttf源文件2.运行C#代码，在“SourceHanSansCN”文件夹中新建“xxxx”文件夹，名字随意3.然后在“xxx”文件夹中添加”index.html”文件（必须是index.html），然后在index.html文件中插入第一点中的CSS代码,保存后，相应的地方就会自动打包压缩出相应的字体文件，完成自动化过程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145class Spider&#123; static void Main(string[] args) &#123; //调用WatcherStrat方法 Spider spider = new Spider(); spider.WatcherStrat(@"D:\Documents and Settings\Desktop\SourceHanSansCN", "*.html"); Console.ReadKey(); &#125; public void autoExcute(string filePath) &#123; //*下面这条注释需要取消，由于md代码取消之后就没有高亮了，所以才加上的 //var file = filePath.Replace("index.html", "").Replace(@"\","/"); string path = file + "index.html"; string path1 = file + "SourceHanSansCN-Medium.ttf"; string strInput = "font-spider " + "\"" + filePath + "\""; string spider = file + ".font-spider"; string source = @"D:/Documents and Settings/Desktop/SourceHanSansCN/source/SourceHanSansCN-Medium.ttf"; string finalRoute = file + "SourceHanSansCN-Medium.ttf"; if (System.IO.File.Exists(path)) &#123; Console.WriteLine("本地文件确实存在！"); try &#123; FileInfo info = new FileInfo(source); info.CopyTo(finalRoute, true); Console.WriteLine("&#123;0&#125; copied to &#123;1&#125;", source, finalRoute); Console.WriteLine("The second Copy operation succeeded, which was expected."); &#125; catch &#123; Console.WriteLine("Double copy is not allowed, which was not expected."); &#125; if (System.IO.File.Exists(path1)) &#123; Process pk = new Process(); //设置要启动的应用程序 pk.StartInfo.FileName = "cmd.exe"; //是否使用操作系统shell启动 pk.StartInfo.UseShellExecute = false; // 接受来自调用程序的输入信息 pk.StartInfo.RedirectStandardInput = true; //输出信息 pk.StartInfo.RedirectStandardOutput = true; // 输出错误 pk.StartInfo.RedirectStandardError = true; //不显示程序窗口 pk.StartInfo.CreateNoWindow = false; //启动程序 pk.Start(); //向cmd窗口发送输入信息 pk.StandardInput.WriteLine(strInput + "&amp;exit"); pk.StandardInput.AutoFlush = true; //获取输出信息 string strOuput = pk.StandardOutput.ReadToEnd(); //等待程序执行完退出进程 pk.WaitForExit(); pk.Close(); Console.WriteLine(strOuput); //删除文件夹.font-spider FileAttributes attr = File.GetAttributes(spider); if (attr == FileAttributes.Directory) &#123; Directory.Delete(spider, true); &#125; else &#123; File.Delete(spider); &#125; &#125; else &#123; Console.WriteLine("字体文件不存在无法格式化"); &#125; &#125; else &#123; Console.WriteLine("本地文件不存在！"); &#125; &#125; public void WatcherStrat(string path, string filter) &#123; FileSystemWatcher watcher = new FileSystemWatcher(); watcher.Path = path; watcher.Filter = filter; watcher.Changed += new FileSystemEventHandler(OnProcess); watcher.Created += new FileSystemEventHandler(OnProcess); watcher.Deleted += new FileSystemEventHandler(OnProcess); watcher.Renamed += new RenamedEventHandler(OnRenamed); watcher.EnableRaisingEvents = true; watcher.NotifyFilter = NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.DirectoryName | NotifyFilters.FileName | NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.Security | NotifyFilters.Size; watcher.IncludeSubdirectories = true; &#125; private static void OnProcess(object source, FileSystemEventArgs e) &#123; if (e.ChangeType == WatcherChangeTypes.Created) &#123; OnCreated(source, e); &#125; else if (e.ChangeType == WatcherChangeTypes.Changed) &#123; OnChanged(source, e); &#125; else if (e.ChangeType == WatcherChangeTypes.Deleted) &#123; OnDeleted(source, e); &#125; &#125; private static void OnCreated(object source, FileSystemEventArgs e) &#123; Console.WriteLine("文件新建事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name); Spider spider = new Spider(); spider.autoExcute(e.FullPath); &#125; private static void OnChanged(object source, FileSystemEventArgs e) &#123; Console.WriteLine("文件改变事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name); Spider spider = new Spider(); spider.autoExcute(e.FullPath); &#125; private static void OnDeleted(object source, FileSystemEventArgs e) &#123; Console.WriteLine("文件删除事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name); &#125; private static void OnRenamed(object source, RenamedEventArgs e) &#123; Console.WriteLine("文件重命名事件处理类型：&#123;0&#125;，路径：&#123;1&#125;，文件或文件夹名称：&#123;2&#125;", e.ChangeType, e.FullPath, e.Name); Spider spider = new Spider(); spider.autoExcute(e.FullPath); &#125;&#125;]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7上部署asp.net MVC项目详细过程]]></title>
    <url>%2F2018%2F04%2F05%2FCentOS%207%E4%B8%8A%E9%83%A8%E7%BD%B2asp.net%20MVC%E9%A1%B9%E7%9B%AE%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[一、Mysql安装：之前在CentOS 7上安装Mysql一直装不上，查了一下才知道已经改用MariaDB代替了 1.删除原来的MariaDB、重装12[root@localhost ~]# yum remove mariadb[root@localhost ~]# yum -y install mariadb 2.启动MariaDB1[root@localhost ~]# systemctl start mariadb.service 如果没问题说明已经安装成功，本人到这步的时候数据库启动报错（成功请忽略，直接跳到下一步）， 2.1 查看启动状态1234567891011121314151617[root@localhost ~]# systemctl status mariadb -lmariadb.service - MariaDB database server Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled) Active: failed (Result: exit-code) since Wed 2015-01-07 22:47:01 EST; 9s ago Process: 19037 ExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID (code=exited, status=1/FAILURE) Process: 19036 ExecStart=/usr/bin/mysqld_safe --basedir=/usr (code=exited, status=0/SUCCESS) Process: 19009 ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n (code=exited, status=0/SUCCESS) Main PID: 19036 (code=exited, status=0/SUCCESS)Jan 07 22:47:00 JX-Store systemd[1]: Starting MariaDB database server...Jan 07 22:47:00 JX-Store mysqld_safe[19036]: 150107 22:47:00 mysqld_safe Logging to '/var/log/mariadb/mariadb.log'.Jan 07 22:47:00 JX-Store mysqld_safe[19036]: 150107 22:47:00 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysqlJan 07 22:47:00 JX-Store mysqld_safe[19036]: 150107 22:47:00 mysqld_safe mysqld from pid file /var/run/mariadb/mariadb.pid endedJan 07 22:47:01 JX-Store systemd[1]: mariadb.service: control process exited, code=exited status=1Jan 07 22:47:01 JX-Store systemd[1]: Failed to start MariaDB database server.Jan 07 22:47:01 JX-Store systemd[1]: Unit mariadb.service entered failed state 解决办法：删除/var/lib/mysql 和 /etc/my.cnf 重新安装 3.登陆MariaDB的操作命令跟Mysql一样123456#可以通过以下命令查看版本，确认MariaDB已安装成功[root@localhost ~]# mysql --version#可以通过 MariaDB 命令行登录，然后对数据库进行sql查询操作[root@localhost ~]# mysql -uroot -pyourpassword# 开放防火墙端口，开启后要重启防火墙[root@localhost ~]# firewall-cmd --zone=public --add-port=3306/tcp --permanent 第一次安装会默认给你配置一个密码，可以搜一下怎么登陆 二、Jexus和Mono的安装配置可参照CentOS 6.6上部署asp.net MVC项目详细过程 三、一些常见问题及操作1.Jexus 大小写敏感解决：cd /usr/jexus/vim jws将#export MONO_IOMAP=”all”前面的“#”去掉!重启Jexus服务: /usr/jexus/jws restart 2.Centos7 下mysql大小写敏感:编辑/etc/my.cnf文件,在[mysqld]节下 添加 lower_case_table_names=1 参数，并设置相应的值 (备注：为0时大小写敏感，为1时大小写不敏感，默认为0)。（必须是在[mysqld]节点下添加，否则没有效果）,重启mariadb：systemctl restart mariadb.service 3.防火墙设置12345678910# 关闭防火墙[root@localhost ~]# systemctl stop firewalld.service # 禁止firewall开机启动[root@localhost ~]# systemctl disable firewalld.service# 开启端口[root@localhost ~]# firewall-cmd --zone=public --add-port=1235/tcp --permanent# 重启防火墙[root@localhost ~]# firewall-cmd --reload# 查看已经开放的端口：[root@localhost ~]# firewall-cmd --list-ports]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 6.6上部署asp.net MVC项目详细过程]]></title>
    <url>%2F2018%2F04%2F05%2FCentOS%206.6%E4%B8%8A%E9%83%A8%E7%BD%B2asp.net%20MVC%E9%A1%B9%E7%9B%AE%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[一、首先更新系统1[root@localhost ~]# yum –y update 二、安装Mono1.安装Mono源码安装需要的组件：1[root@localhost ~]# yum -y install wget glib2-devel libtiff libtiff-devel libjpeg libjpeg-devel giflib giflib-devel libpng libpng-devel libX11 libX11-devel freetype freetype-devel fontconfig fontconfig-devel libexif libexif-devel gcc-c++ gettext unzip zip 2.安装Mono之前，需要先安装其依赖的GDI+组件。联网下载libgdiplus源码安装包12[root@localhost ~]# cd /usr[root@localhost usr]# wget http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.tar.bz2 解压libgdiplus源码安装包：1[root@localhost usr]# tar jxvf libgdiplus-2.10.tar.bz2 配置libgdiplus组件安装路径:12[root@localhost usr]# cd libgdiplus-2.10[root@localhost libgdiplus-2.10]# ./configure --prefix=/usr/apollo/hostd/mono/ 编译libgdiplus源码：1[root@localhost libgdiplus-2.10]# make 安装libgdiplus组件：1[root@localhost libgdiplus-2.10]# make install 3.安装Mono:Mono是Linux平台的.NET Framework实现，是.NET程序移植到Linux平台的不二选择。首先，联网下载Mono源码安装包：12[root@localhost libgdiplus-2.10]# cd /usr[root@localhost usr]# wget http://download.mono-project.com/sources/mono/mono-4.0.4.1.tar.bz2 解压Mono源码安装包：1[root@localhost usr]# tar jxvf mono-4.0.4.1.tar.bz2 配置Mono安装路径：12[root@localhost usr]# cd mono-4.0.4[root@localhost mono-4.0.4]# ./configure --prefix=/usr/apollo/hostd/mono 编译Mono源码（此过程耗时一般为半小时到一小时，视系统软硬件配置而定）：1[root@localhost mono-4.0.4]# make 安装Mono：1[root@localhost mono-4.0.4]# make install 通过查看Mono版本，确认Mono是否安装成功12[root@localhost mono-4.0.4]# cd /usr/apollo/hostd/mono/bin/[root@localhost bin]# ./mono -V 三、安装JexusJexus是国人开发的Linux平台上的ASP.NET Web应用中间件，类似于Windows平台的IIS。实践证明Jexus安装简单，运行稳定，是Linux平台架设ASP.NET应用的不错选择。 1.首先，联网下载Jexus安装包：12[root@localhost ~]# cd /usr[root@localhost usr]# wget http://www.linuxdot.net/down/jexus-5.6.5.tar.gz 解压Jexus安装包：1[root@localhost usr]# tar zxvf jexus-5.6.5.tar.gz 修改Jexus安装路径:123456789[root@localhost usr]# cd jexus-5.6.5[root@localhost jexus-5.6.5]# vi install用vim编辑文件#!/bin/shSRC_DIR=$(cd $(dirname $0);pwd)DAT_DIR=$&#123;SRC_DIR&#125;/dataJWS_DIR='/usr/apollo/hostd/jexus'… 2.安装Jexus：1[root@localhost jexus-5.6.5]# sudo ./install 修改Jexus关于mono路径的配置：123456789[root@localhost jexus-5.6.5]# cd /usr/apollo/hostd/jexus[root@localhost jexus]# vi jws#!/bin/shJWS_HOME=$(cd $(dirname $0);pwd)export LANG="zh_CN.UTF-8"export PATH=/usr/bin:$&#123;JWS_HOME&#125;/../mono/bin:$PATHexport LD_LIBRARY_PATH=/usr/lib:$&#123;JWS_HOME&#125;/../mono/lib:$LD_LIBRARY_PATH… 3.启动Jexus服务，测试Jexus安装是否正确：1[root@localhost jexus]# ./jws start 设置Jexus服务开机自启动，增加如下高亮行：123[root@localhost jexus]# vi /etc/rc.d/rc.localtouch /var/lock/subsys/local/usr/apollo/hostd/jexus/jws start 修改该文件权限并重启：1[root@localhost jexus]# chmod +x /etc/rc.d/rc.local 四、部署网站创建网站目录：1234567891011121314151617[root@localhost jexus]# cd /usr/apollo/[root@localhost apollo]# mkdir webapps[root@localhost apollo]# cd webapps/[root@localhost webapps]# mkdir default[root@localhost webapps]# cd default/[root@localhost default]# touch index.html[root@localhost default]# vi index.html&lt;html&gt;&lt;head&gt; &lt;title&gt;测试ASP.NET&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;&lt;/head&gt;&lt;body&gt; 测试ASP.NET&lt;/body&gt;&lt;/html&gt; 修改Jexus网站配置：1234567891011[root@localhost default]# cd /usr/apollo/hostd/jexus/siteconf [root@localhost siteconf]# vi default ###################### # Web Site: Default ######################################## port=80 root=/ /usr/apollo/webapps/default hosts=* #OR your.com,*.your.com … 开放防火墙80端口：12345678910111213141516[root@localhost siteconf]# vi /etc/sysconfig/iptables # Firewall configuration written by system-config-firewall # Manual customization of this file is not recommended. *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT 重启iptables，使防火墙设置生效：1[root@localhost siteconf]# /etc/init.d/iptables restart 重启Jexus服务：1[root@localhost siteconf]# /usr/apollo/hostd/jexus/jws restart 终端浏览器输入网址http://ip:port/index.html访问网站： 五、数据库1.卸载centos6.5本身所安装的mysql：123[root@localhost]# yum remove mysql mysql-server mysql-libs mysql-server[root@localhost]# find / -name mysql #将找到的都删掉 rm -fr [root@localhost]# rpm -qa|grep -i mysql #查看还有么没有mysql，如果有的话，使用rpm -e –nodeps 包名 删除 2.安装mysql1[root@localhost usr]# yum list mysql-server 如果显示列表，则说明成功了1[root@localhost usr]# yum install mysql-server 过程中选择Y继续安装，最后安装成功 3.设置Mysql的服务先启动Mysql服务1[root@localhost usr]# service mysqld start 设置Mysql开机启动1[root@localhost usr]# chkconfig mysqld on 开启3306端口并保存12[root@localhost usr]# /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT[root@localhost usr]# /etc/rc.d/init.d/iptables save 4.修改密码并设置远程访问连接mysql数据库设置密码12[root@localhost usr]# use mysqlmysql&gt; update user set password=password('密码') where user='root';flush privileges; 5.重启mysql服务1[root@localhost usr]# service mysqld restart 参考文章： ASP.NET 跨平台最佳实践]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程书籍]]></title>
    <url>%2F2018%2F03%2F30%2F%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[Web CSS JavaScript PHP Linux Web 关于浏览器和网络的 20 项须知 浏览器开发工具的秘密 Chrome 开发者工具中文手册 Chrome扩展开发文档 Grunt中文文档 gulp中文文档 Gulp 入门指南 移动Web前端知识库 正则表达式30分钟入门教程 前端开发体系建设日记 移动前端开发收藏夹 JSON风格指南 HTTP 接口设计指北 前端资源分享（一） 前端资源分享（二） 前端代码规范 及 最佳实践 前端开发者手册 前端工程师手册 w3school教程整理 Wireshark用户手册 一站式学习Wireshark HTTP 下午茶 HTTP/2.0 中文翻译 RFC 7540 - HTTP/2 中文翻译版 http2讲解 3 Web Designs in 3 Weeks 站点可靠性工程 CSS 学习CSS布局 通用 CSS 笔记、建议与指导 CSS参考手册 Emmet 文档 前端代码规范 (腾讯 AlloyTeam 团队) HTML和CSS编码规范 Sass Guidelines 中文 CSS3 Tutorial 《CSS3 教程》 MDN HTML 中文文档 MDN CSS 中文文档 JavaScript JavaScript DOM编程艺术 JavaScript高级程序设计 JavaScript权威指南 Google JavaScript 代码风格指南 Google JSON 风格指南 Airbnb JavaScript 规范 JavaScript 标准参考教程（alpha） Javascript编程指南 (源码) javascript 的 12 个怪癖 JavaScript 秘密花园 JavaScript核心概念及实践 (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者) 《JavaScript 模式》 “JavaScript patterns”中译本 命名函数表达式探秘 学用 JavaScript 设计模式 (开源中国) 深入理解JavaScript系列 ECMAScript 5.1 中文版 ECMAScript 6 入门 (作者：阮一峰) JavaScript Promise迷你书 You-Dont-Know-JS (深入JavaScript语言核心机制的系列图书) JavaScript 教程 廖雪峰 MDN JavaScript 中文文档 jQuery jQuery 解构 简单易懂的JQuery魔法 How to write jQuery plugin You Don’t Need jQuery 如何实现一个类jQuery？ Node.js Node入门 七天学会NodeJS Nodejs Wiki Book (繁体中文) express.js 中文文档 koa 中文文档 一起学koa 使用 Express + MongoDB 搭建多人博客 Express框架 Node.js 包教不包会 Learn You The Node.js For Much Win! (中文版) Node debug 三法三例 nodejs中文文档 orm2 中文文档 underscore.js Underscore.js中文文档 backbone.js backbone.js中文文档 backbone.js入门教程 (PDF) Backbone.js入门教程第二版 Developing Backbone.js Applications(中文版) AngularJS AngularJS最佳实践和风格指南 AngularJS中译本 AngularJS入门教程 构建自己的AngularJS 在Windows环境下用Yeoman构建AngularJS项目 Zepto.js Zepto.js 中文文档 Sea.js Hello Sea.js React.js React.js 中文文档 React webpack-cookbook React 入门教程 React Native 中文文档(含最新Android内容) Learn React &amp; Webpack by building the Hacker News front page impress.js impress.js的中文教程 CoffeeScript CoffeeScript Cookbook The Little Book on CoffeeScript中文版 CoffeeScript 编码风格指南 TypeScipt TypeScript Handbook ExtJS Ext4.1.0 中文文档 Meteor Discover Meteor Meteor 中文文档 Angular-Meteor 中文教程 Chrome扩展及应用开发 PHP PHP 官方手册 PHP调试技术手册(PDF) PHP之道：php-the-right-way (@wulijun版 PHPHub版) PHP 最佳实践 PHP 开发者实践 深入理解PHP内核 PHP扩展开发及内核应用 Laravel5.1 中文文档 Laravel 5.1 LTS 速查表 Symfony2 Cookbook 中文版(版本 2.7.0 LTS) Symfony2中文文档 (未译完) YiiBook几本Yii框架的在线教程 深入理解 Yii 2.0 Yii 框架中文文檔 简单易懂的PHP魔法 swoole文档及入门教程 Composer 中文网 Slim 中文文档 Lumen 中文文档 PHPUnit 中文文档 Linux 鸟哥的Linux私房菜]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用操作]]></title>
    <url>%2F2018%2F03%2F30%2FLinux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[最近做项目迁移经常接触CentOS，下面就把常用的Linux操作记录一下，以便查询1、cd命令用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径123cd /home/abc # 切换到目录/home/abccd ./path # 切换到当前目录下的path目录中，“.”表示当前目录 cd ../path # 切换到上层目录中的path目录中，“..”表示上一层目录 2、ls命令用于查看文件与目录的命令1/home/abc ls #查看/home/abc目录下的文件 3、grep命令用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来1rpm- qa | grep mysql #是指不区分大小写的列出含mysql字符的已经安装的rpm包软件 4、find命令用于查找的功能find [PATH] [option] [action]12find / -name abc # 查找文件名为abc的文件 find . -perm 0755 # 查找当前目录中文件权限的0755的文件 5、cp命令用于复制文件，它还可以把多个文件一次性地复制到一个目录下1cp -R /home/abc/httpd.conf /etc/conf 将/home/abc/httpd.conf文件复制到/etc/conf目录下 6、mv命令用于移动文件、目录或更名12mv file1 file2 file3 /etc/conf # 把文件file1、file2、file3移动到目录/etc/conf中 mv file1 file2 # 把文件file1重命名为file2 7、vim命令用于文本编辑，它接一个或多个文件名作为参数，如果文件存在就打开，如果文件不存在就以该文件名创建一个文件1vim /etc/conf/abc.txt # 把文件/etc/conf/abc.txt打开编辑，如果文件不存在就以该文件名创建一个文件并打开编辑 8、yum命令用于查找、安装、删除某一个、一组甚至全部软件包的命令yum [options] [command] [package …]12yum install pam-devel #安装 pam-develyum remove pam-devel #移除 pam-devel 9、rm命令用于删除某一个文件或文件夹12rm -rf /var/log/httpd/access #删除/var/log/httpd/access目录以及其下所有文件、文件夹rm -f /var/log/httpd/access.log #将会强制删除/var/log/httpd/access.log这个文件]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
